//
//  URLSessionMock.swift
//  BeachGuardian
//
//  Created by Vincent Poon on 3/20/19.
//  Copyright Â© 2019 Sebastian Macedonio. All rights reserved.
//

import XCTest
import Foundation
@testable import BeachGuardian

class MockURLSessionDataTask: URLSessionDataTaskProtocol
{
    private (set) var resumeWasCalled = false
    
    func resume()
    {
        resumeWasCalled = true
    }
}

class MockURLSession: URLSessionProtocol
{
    func dataTask(with request: URLRequest, completionHandler: @escaping DataTaskResult) -> URLSessionDataTaskProtocol {
        lastURL = request.url
        
        completionHandler(nextData, successHttpURLResponse(request: request), nextError)
        return nextDataTask
    }
    
    func uploadTask(with request: URLRequest, from data: Data?, completionHandler: @escaping DataTaskResult) -> URLSessionDataTaskProtocol {
        lastURL = request.url
        
        completionHandler(nextData, successHttpURLResponse(request: request), nextError)
        return nextDataTask
    }
    
    var nextDataTask = MockURLSessionDataTask()
    var nextData: Data?
    var nextError: Error?
    
    private (set) var lastURL : URL?
    
    func successHttpURLResponse(request: URLRequest) -> URLResponse
    {
        return HTTPURLResponse(url: request.url!, statusCode: 200, httpVersion: "HTTP/1.1", headerFields: nil)!
    }
}

class URLSessionProtocolTests : XCTestCase {
    
    override func setUp()
    {
        
    }
    
    func test_uploadTask_TaskUploaded()
    {
        class MockSessionForURL : URLSession{
            override var configuration: URLSessionConfiguration{
                get{
                    return URLSessionConfiguration.default
                }
                set{
                    self.configuration = newValue
                }
            }
            var uploadTaskCalled = false
            override func uploadTask(with request: URLRequest, from bodyData: Data?, completionHandler: @escaping (Data?, URLResponse?, Error?) -> Void) -> URLSessionUploadTask {
                    uploadTaskCalled = true
                    XCTAssertEqual(uploadTaskCalled, true)
                    return URLSessionUploadTask()
            }
        }
        _ = UserSession()
        //DataFromDB.init(session: userSession)
        var session : URLSessionProtocol
        session = MockSessionForURL()
        _ = URL(string: "www.google.com")!
        let urlObj = URL(string: "www.google.com")
        var request = URLRequest(url: urlObj!)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        //var uploadTaskCalled = false
        let _ : URLSessionDataTaskProtocol = session.uploadTask(with: request, from: Data(), completionHandler: {(data, response, error) in
        })
        
    }
}
