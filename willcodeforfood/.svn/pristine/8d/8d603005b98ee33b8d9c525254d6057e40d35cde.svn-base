import Foundation

protocol URLSessionProtocol
{
    typealias DataTaskResult = (Data?, URLResponse?, Error?) -> Void
    
    func dataTask(with request: URLRequest, completionHandler: @escaping DataTaskResult) -> URLSessionDataTaskProtocol
    
    func uploadTask(with request: URLRequest, from data: Data?, completionHandler: @escaping DataTaskResult) -> URLSessionDataTaskProtocol
}

protocol URLSessionDataTaskProtocol{
    func resume()
}

extension URLSession: URLSessionProtocol
{
    func dataTask(with request: URLRequest, completionHandler: @escaping URLSessionProtocol.DataTaskResult) -> URLSessionDataTaskProtocol {
        return dataTask(with: request, completionHandler: completionHandler) as URLSessionDataTask
    }
    
    func uploadTask(with request: URLRequest, from data: Data?, completionHandler: @escaping URLSessionProtocol.DataTaskResult) -> URLSessionDataTaskProtocol{
        return uploadTask(with: request, from: data, completionHandler: completionHandler) as URLSessionUploadTask
    }
}

extension URLSessionDataTask: URLSessionDataTaskProtocol{}
